<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="pictureBox.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        PTW+KN6L7HI3VPuGsx6INAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADQBp2/EBp2/EBp2/EBp2/EBp2/EBp
        2/EBp2/EBp2/EBp2/EBp2/EBp2/EBoAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB//2Q==
</value>
  </data>
</root>